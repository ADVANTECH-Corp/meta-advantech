From 2ea7d2cd3a5df4e23d1b404b2119330f2b6dd699 Mon Sep 17 00:00:00 2001
From: Your Name <you@example.com>
Date: Sun, 10 Apr 2016 20:44:01 +0800
Subject: [PATCH] s2


diff --git a/common/Makefile b/common/Makefile
index f97a385..33945b7 100644
--- a/common/Makefile
+++ b/common/Makefile
@@ -224,6 +224,7 @@ obj-$(CONFIG_USB_STORAGE) += usb_storage.o
 endif
 ifdef CONFIG_SPL_SATA_SUPPORT
 obj-$(CONFIG_CMD_SCSI) += cmd_scsi.o
+obj-$(CONFIG_CMD_SATA) += cmd_sata.o
 endif
 # environment
 ifdef CONFIG_SPL_ENV_SUPPORT
diff --git a/common/spl/spl_sata.c b/common/spl/spl_sata.c
index 2a5eb29..67b9a5f 100644
--- a/common/spl/spl_sata.c
+++ b/common/spl/spl_sata.c
@@ -1,50 +1,126 @@
 /*
- * (C) Copyright 2013
- * Texas Instruments, <www.ti.com>
+ * (C) Copyright 2014 Advantech Co. <risc-sw@advantech.com.tw>
  *
- * Dan Murphy <dmurphy@ti.com>
+ * See file CREDITS for list of people who contributed to this
+ * project.
  *
- * SPDX-License-Identifier:	GPL-2.0+
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
  *
- * Derived work from spl_usb.c
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
  */
-
 #include <common.h>
 #include <spl.h>
 #include <asm/u-boot.h>
+#include <asm/utils.h>
 #include <sata.h>
-#include <scsi.h>
-#include <fat.h>
-#include <image.h>
+#include <libata.h>
+#include <version.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
-void spl_sata_load_image(void)
+static int spl_sata_check_crc(unsigned int dev)
 {
+	u32 n;
+	/* read crc file */
+	char tag[512];
+	char crc[512];
+	
+	n = sata_read(dev, 0x02, 1, (void *) 0x22100000);
+	if(n != 1)
+		return 1;
+	
+	memcpy(tag, (void *) 0x22100000, 512);
+	//tag[9] = '\0';
+	//printf("crc file %s\n", tag);
+	
+	/* make uboot crc */
+	n = sata_read(dev, 0x03, 0x4b0, (void *) 0x22000000);
+	if(n != 0x4b0)
+		return 1;
+	
+	*(int *)0x21f00000 = crc32 (0, (const uchar *) 0x22000000, 0x96000);
+	sprintf(crc, "%08x", *(int *)0x21f00000);
+	//crc[9] = '\0';
+	//printf("uboot crc %s\n", crc);
+	
+	/* verrify crc */
+	if(memcmp(tag, crc, 8))
+	{
+		printf("spl: sata dev %d - crc error\n", dev);
+		return 1;
+	}
+
+	return 0;
+}
+
+static int sata_load_image_raw(unsigned int dev)
+{
+	u32 image_size_sectors, err;
+	const struct image_header *header;
+
+	header = (struct image_header *)(CONFIG_SYS_TEXT_BASE -
+						sizeof(struct image_header));
+
+	/* read image header to find the image size & load address */
+	err = sata_read(dev,
+			CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR, 1,
+			(void *)header);
+
+	if (err <= 0)
+		goto end;
+
+	spl_parse_image_header(header);
+
+	/* convert size to sectors - round up */
+	image_size_sectors = (spl_image.size + ATA_SECT_SIZE - 1) /
+				ATA_SECT_SIZE;
+
+	/* Read the header too to avoid extra memcpy */
+	err = sata_read(dev,
+			CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR,
+			image_size_sectors, (void *)spl_image.load_addr);
+
+	printf("SATA read: dev # %d block # %d, count %d ... ",
+		dev, CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR, image_size_sectors);
+end:
+	if (err <= 0) {
+		printf("spl: sata blk read err - %d\n", err);
+		return 1;
+	} else
+		return 0;
+}
+
+int spl_sata_load_image(unsigned int dev)
+{
+	block_dev_desc_t *sata_dev_desc;
 	int err;
-	block_dev_desc_t *stor_dev;
 
-	err = init_sata(CONFIG_SPL_SATA_BOOT_DEVICE);
-	if (err) {
-#ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
-		printf("spl: sata init failed: err - %d\n", err);
-#endif
-		hang();
-	} else {
-		/* try to recognize storage devices immediately */
-		scsi_scan(0);
-		stor_dev = scsi_get_dev(0);
+	if (sata_initialize()) {
+		printf("spl: sata_initialize failed\n");
+		return 1;
 	}
 
-#ifdef CONFIG_SPL_OS_BOOT
-	if (spl_start_uboot() || spl_load_image_fat_os(stor_dev,
-									CONFIG_SYS_SATA_FAT_BOOT_PARTITION))
-#endif
-	err = spl_load_image_fat(stor_dev,
-				CONFIG_SYS_SATA_FAT_BOOT_PARTITION,
-				CONFIG_SPL_FS_LOAD_PAYLOAD_NAME);
+	sata_dev_desc = sata_get_dev(dev);
+	if (!sata_dev_desc) {
+		printf("spl: cannot find sata dev %d\n", dev);
+		return 1;
+	}
+
+	err = spl_sata_check_crc(dev);
 	if (err) {
-		puts("Error loading sata device\n");
-		hang();
+		return 1;
 	}
+
+	return sata_load_image_raw(dev);
 }
-- 
1.7.9.5

