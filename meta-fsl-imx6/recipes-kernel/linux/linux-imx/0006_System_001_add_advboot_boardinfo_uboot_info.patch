From b0ab4d7912a00ba428a8455d25c77e784e7d7f63 Mon Sep 17 00:00:00 2001
From: Your Name <you@example.com>
Date: Thu, 19 May 2016 17:16:37 +0800
Subject: [PATCH] add_advboot and boardinfo and uboot information


diff --git a/fs/proc/Makefile b/fs/proc/Makefile
old mode 100644
new mode 100755
index 7151ea4..8d41de2
--- a/fs/proc/Makefile
+++ b/fs/proc/Makefile
@@ -24,6 +24,7 @@ proc-y	+= softirqs.o
 proc-y	+= namespaces.o
 proc-y	+= self.o
 proc-y	+= thread_self.o
+proc-$(CONFIG_ARCH_ADVANTECH)	+= boardinfo.o advboot.o uboot.o
 proc-$(CONFIG_PROC_SYSCTL)	+= proc_sysctl.o
 proc-$(CONFIG_NET)		+= proc_net.o
 proc-$(CONFIG_PROC_KCORE)	+= kcore.o
diff --git a/fs/proc/advboot.c b/fs/proc/advboot.c
new file mode 100644
index 0000000..ba8b97b
--- /dev/null
+++ b/fs/proc/advboot.c
@@ -0,0 +1,52 @@
+#ifdef CONFIG_ARCH_ADVANTECH
+
+#include <linux/proc_fs.h>
+#include <linux/seq_file.h>
+
+char board_advboot_version[100];
+
+static int advboot_version_proc_show(struct seq_file *m, void *v)
+{
+	char uboot_temp_str[20] = "uboot_version=";
+	char advboot_temp_str[20] = "advboot_version=";
+	char *uboot_ver, *advboot_ver;
+	int uboot_len=0, total_len=0, advboot_len=0; 
+
+	/* uboot */
+    uboot_ver = strstr(saved_command_line, uboot_temp_str);
+	uboot_len = strlen(uboot_ver);
+	uboot_ver = uboot_ver + strlen(uboot_temp_str);
+
+	/* advboot */
+    advboot_ver = strstr(saved_command_line, advboot_temp_str);
+	advboot_ver = advboot_ver + strlen(advboot_temp_str);
+	total_len = strlen(advboot_ver);
+	memset(board_advboot_version, 0x0, sizeof(board_advboot_version));
+	advboot_len = total_len - uboot_len - 1;
+	strncpy(board_advboot_version, advboot_ver, advboot_len);
+	
+	seq_printf(m, "%s\n", board_advboot_version);
+
+	return 0;
+}
+
+static int advboot_version_proc_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, advboot_version_proc_show, NULL);
+}
+
+static const struct file_operations advboot_version_proc_fops = {
+	.open		= advboot_version_proc_open,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+};
+
+static int __init proc_advboot_version_init(void)
+{
+	proc_create("advboot_version", 0, NULL, &advboot_version_proc_fops);
+	return 0;
+}
+module_init(proc_advboot_version_init);
+
+#endif
\ No newline at end of file
diff --git a/fs/proc/boardinfo.c b/fs/proc/boardinfo.c
new file mode 100644
index 0000000..c53b87d
--- /dev/null
+++ b/fs/proc/boardinfo.c
@@ -0,0 +1,32 @@
+#ifdef CONFIG_ARCH_ADVANTECH
+#include <linux/proc_fs.h>
+#include <linux/seq_file.h>
+
+extern char board_type[20];
+
+static int boardinfo_proc_show(struct seq_file *m, void *v)
+{
+	seq_printf(m, "%s", board_type);
+
+	return 0;
+}
+
+static int boardinfo_proc_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, boardinfo_proc_show, NULL);
+}
+
+static const struct file_operations boardinfo_proc_fops = {
+	.open		= boardinfo_proc_open,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+};
+
+static int __init proc_boardinfo_init(void)
+{
+	proc_create("board", 0, NULL, &boardinfo_proc_fops);
+	return 0;
+}
+module_init(proc_boardinfo_init);
+#endif
diff --git a/fs/proc/uboot.c b/fs/proc/uboot.c
new file mode 100644
index 0000000..ac4ffa8
--- /dev/null
+++ b/fs/proc/uboot.c
@@ -0,0 +1,44 @@
+#ifdef CONFIG_ARCH_ADVANTECH
+
+#include <linux/proc_fs.h>
+#include <linux/seq_file.h>
+
+char board_uboot_version[100];
+
+static int uboot_version_proc_show(struct seq_file *m, void *v)
+{
+	char uboot_temp_str[20] = "uboot_version=";
+	char *uboot_ver;
+	int uboot_len=0;
+
+    uboot_ver = strstr(saved_command_line, uboot_temp_str);
+	uboot_len = strlen(uboot_ver);
+	uboot_ver = uboot_ver + strlen(uboot_temp_str);
+	memset(board_uboot_version, 0x0, sizeof(board_uboot_version));
+	strcpy(board_uboot_version, uboot_ver);
+
+	seq_printf(m, "%s\n", board_uboot_version);
+
+	return 0;
+}
+
+static int uboot_version_proc_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, uboot_version_proc_show, NULL);
+}
+
+static const struct file_operations uboot_version_proc_fops = {
+	.open		= uboot_version_proc_open,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+};
+
+static int __init proc_uboot_version_init(void)
+{
+	proc_create("uboot_version", 0, NULL, &uboot_version_proc_fops);
+	return 0;
+}
+module_init(proc_uboot_version_init);
+
+#endif
\ No newline at end of file
-- 
1.7.9.5

