--- a/attrib/gatttool.c	2014-11-10 01:13:59.000000000 +0800
+++ b/attrib/gatttool.c	2017-01-23 16:47:01.776709819 +0800
@@ -60,6 +60,7 @@
 static gboolean opt_listen = FALSE;
 static gboolean opt_char_desc = FALSE;
 static gboolean opt_char_write = FALSE;
+static gboolean opt_char_write_read = TRUE;
 static gboolean opt_char_write_req = FALSE;
 static gboolean opt_interactive = FALSE;
 static GMainLoop *event_loop;
@@ -72,6 +73,19 @@
 	uint16_t end;
 };
 
+static int strtohandle(const char *src)
+{
+	char *e;
+	int dst;
+
+	errno = 0;
+	dst = strtoll(src, &e, 16);
+	if (errno != 0 || *e != '\0')
+		return -EINVAL;
+
+	return dst;
+}
+
 static void events_handler(const uint8_t *pdu, uint16_t len, gpointer user_data)
 {
 	GAttrib *attrib = user_data;
@@ -246,6 +260,8 @@
 	uint8_t value[plen];
 	ssize_t vlen;
 	int i;
+	float a_temp = 0, o_temp = 0;
+	char cmd[1024];
 
 	if (status != 0) {
 		g_printerr("Characteristic value/descriptor read failed: %s\n",
@@ -258,11 +274,17 @@
 		g_printerr("Protocol error\n");
 		goto done;
 	}
-	g_print("Characteristic value/descriptor: ");
+	/*g_print("Characteristic value/descriptor: ");
 	for (i = 0; i < vlen; i++)
 		g_print("%02x ", value[i]);
-	g_print("\n");
+	g_print("\n");*/
 
+	o_temp= ((value[1] << 8) + (value[0] >> 8))/128.0;
+	a_temp= ((value[3] << 8) + (value[2] >> 8))/128.0;
+	printf("return: %.2f ,%.2f\n", a_temp, o_temp);
+	sprintf(cmd, "iothub_client_sample_http %s %.2f %.2f\n", opt_dst, a_temp, o_temp);
+	printf("==>cmd: %s\n", cmd);
+	system(cmd);
 done:
 	if (!opt_listen)
 		g_main_loop_quit(event_loop);
@@ -364,6 +386,29 @@
 	return FALSE;
 }
 
+static gboolean characteristics_write_read(gpointer user_data)
+{
+	GAttrib *attrib = user_data;
+	uint8_t *value;
+	size_t len;
+
+// write: 0x24 01
+	opt_handle = strtohandle("0x24");
+	len = gatt_attr_data_from_string("01", &value);
+
+	gatt_write_cmd(attrib, opt_handle, value, len, NULL, value);
+// read: 0x21
+	opt_handle = strtohandle("0x21");
+	gatt_read_char(attrib, opt_handle, char_read_cb, attrib);
+	
+	g_free(value);
+	return FALSE;
+
+error:
+	g_main_loop_quit(event_loop);
+	return FALSE;
+}
+
 static void char_write_req_cb(guint8 status, const guint8 *pdu, guint16 plen,
 							gpointer user_data)
 {
@@ -494,6 +539,9 @@
 	{ "char-write", 0, 0, G_OPTION_ARG_NONE, &opt_char_write,
 		"Characteristics Value Write Without Response (Write Command)",
 		NULL },
+	{ "char-write-read", 0, 0, G_OPTION_ARG_NONE, &opt_char_write_read,
+		"Characteristics Value Write then Read (Write then read Command)",
+		NULL },		
 	{ "char-write-req", 0, 0, G_OPTION_ARG_NONE, &opt_char_write_req,
 		"Characteristics Value Write (Write Request)", NULL },
 	{ "char-desc", 0, 0, G_OPTION_ARG_NONE, &opt_char_desc,
@@ -561,7 +609,7 @@
 		g_printerr("%s\n", gerr->message);
 		g_clear_error(&gerr);
 	}
-
+/*
 	if (opt_interactive) {
 		interactive(opt_src, opt_dst, opt_dst_type, opt_psm);
 		goto done;
@@ -575,6 +623,8 @@
 		operation = characteristics_read;
 	else if (opt_char_write)
 		operation = characteristics_write;
+	else if (opt_char_write_read)
+		operation = characteristics_write_read;	
 	else if (opt_char_write_req)
 		operation = characteristics_write_req;
 	else if (opt_char_desc)
@@ -586,7 +636,8 @@
 		got_error = TRUE;
 		goto done;
 	}
-
+*/
+	operation = characteristics_write_read;	
 	if (opt_dst == NULL) {
 		g_print("Remote Bluetooth address required\n");
 		got_error = TRUE;
--- a/tools/hcitool.c	2015-03-31 13:21:59.000000000 +0800
+++ b/tools/hcitool.c	2017-01-05 09:47:24.335149262 +0800
@@ -2369,16 +2369,24 @@
 	signal_received = sig;
 }
 
-static void eir_parse_name(uint8_t *eir, size_t eir_len,
+static int eir_parse_name(uint8_t *eir, size_t eir_len,
 						char *buf, size_t buf_len)
 {
 	size_t offset;
+	int i;
 
 	offset = 0;
 	while (offset < eir_len) {
 		uint8_t field_len = eir[0];
 		size_t name_len;
 
+		/*
+		printf("%d\n", eir_len);
+		for (i=0;i<eir_len;i++)
+			printf("%02X ", eir[i]);
+		printf("\n");
+		*/
+
 		/* Check for the end of EIR */
 		if (field_len == 0)
 			break;
@@ -2394,7 +2402,7 @@
 				goto failed;
 
 			memcpy(buf, &eir[2], name_len);
-			return;
+			return 1;
 		}
 
 		offset += field_len + 1;
@@ -2403,6 +2411,7 @@
 
 failed:
 	snprintf(buf, buf_len, "(unknown)");
+	return -1;
 }
 
 static int print_advertising_devices(int dd, uint8_t filter_type)
@@ -2437,6 +2446,8 @@
 		evt_le_meta_event *meta;
 		le_advertising_info *info;
 		char addr[18];
+		char name[30];
+		int ret=0, i=0, num_reports;
 
 		while ((len = read(dd, buf, sizeof(buf))) < 0) {
 			if (errno == EINTR && signal_received == SIGINT) {
@@ -2457,19 +2468,27 @@
 		if (meta->subevent != 0x02)
 			goto done;
 
-		/* Ignoring multiple reports */
+
+		num_reports = meta->data[0];
 		info = (le_advertising_info *) (meta->data + 1);
-		if (check_report_filter(filter_type, info)) {
-			char name[30];
+		
+		while(1){
 
 			memset(name, 0, sizeof(name));
-
-			ba2str(&info->bdaddr, addr);
-			eir_parse_name(info->data, info->length,
+		
+			if (check_report_filter(filter_type, info)) {
+				ba2str(&info->bdaddr, addr);
+				ret= eir_parse_name(info->data, info->length,
 							name, sizeof(name) - 1);
+			}
 
-			printf("%s %s\n", addr, name);
+			if ((ret < 0)&&(i++ < num_reports))
+				info = (le_advertising_info *) (info->data + info->length + 1);
+			else
+				break;
 		}
+
+		printf("%s %s\n", addr, name);
 	}
 
 done:
